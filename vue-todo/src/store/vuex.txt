Flux: 기존의 MVC 패턴의 구조적 오류(규모가 커질수록 복잡한 구조), 복잡성을 고려하여 데이터를 단방향으로 통일 시킨 새로운 구조
데이터가 여러 갈래로 나누어지지않고 단방향으로 흘러 추적이 용이

Vuex: 복작합 애플리케이션에서 컴포넌트의 개수가 많아지면
컴포넌트 간에 데이터 전달이 어려워지고 데이터 전달이 명시적이지 않는데,
이를 해결하기 위한 라이브러리(view / 화면 -> Actions / 메서드(특정 로직을 발생, 데이터 변경 등) -> state / 컴포넌트간의 공유하는 데이터)

Vuex 컨셉: 
(MVC패턴의 구조적 오류 해결, 컴포넌트 간 데이터 전달 명시, 여러 개의 컴포넌트에서 같은 데이터를 업데이터 할 때 동기화 문제 해결)
일반적으로 src 폴더 밑에 store라는 이름의 폴더에 생성

Vue component(화면) -> action(비동기 로직) -> Mutations(동기 로직) -> state(상태, 데이터)

Vuex 기술 요소:
-state: 여러 컴포넌트에 공유되는 데이터 / data
-getters: 연산된 state 값을 접근하는 속성 / computed
-mutations: state 값을 변경하는 이벤트 로직, 메서드 / methods
-actions: 비동기 처리 로직을 선언하는 메서드 / aysnc methods

*****state*****
여러 컴포넌트 간에 공유할 데이터 / 상태

--Vue
data: {
    message: 'Hello Vue.js!'
}

--Vuex
state: {
    message: 'Hello Vue.js!'
}

--Vue
<p>{{ message }}</p>

--Vuex
<p>{{ this.$store.state.message }}</p>

*****getters*****
state 값을 접근하는 속성이자 computed()처럼 미리 연산된 값을 접근하는 속성

--store.js
state: {
    num: 10
},
getters: {
    getNumber(state) {
        return state.num;
        }
    },
    doubleNumber(state) {
        return state.num * 2;
    }
}
<p>{{ this.$store.getters.getNumber }}</p>
<p>{{ this.$store.getters.doubleNumber }}</p>

*****Mutations*****
state의 값을 변경할 수 있는 유일한 방법이자 메서드
뮤테이션은 commit()으로 동작시킨다.
속성 메서드의 첫번째 인자로 state를 가져온다 / 변경 가능함
this.$store.state.counter++ 와 같이 직접 state를 변경하지 않는 이뉴는
여러 컴포넌트에서 state값을 공유하고 특정 컴포넌트에서 변경되었는지 추적해야하는데
뮤테이션을 거치지 않고 직접 접근하면 특정 시점에 어떤 컴포넌트가 state를 접근하여
변경 한건지 추적하기가 어렵기 때문에 뮤테이션을 거쳐 state를 변경한다.
따라서, 뷰의 반응성을 거스르지 않게 명시적으로 상태 변화를 수행, 반응성, 디버깅, 테스팅 혜택을 얻는다.
--store.js
state: { num: 10 },
mutations: {
    printNumbers(state) {
        return state.num
    },
    sumNumbers(state, anotherNum) {
        return state.num + anotherNum;
    }
}
--App.Vue
this.$store.commit('printNumbers');
this.$store.commit('sumNumbers', 20);

--store.js
state: { storeNum: 10 },
mutations: {
    modifyState(state, payload) {
        console.log(payload.str);
        return state.storeNum += payload.num;
    }
}

--App.vue
this.$store.commit('modifyState', {
    str: 'passed from payload',
    num: 20 
});

*****actions*****
비동기 처리: 특정한 요청을 보냈을 때(클라이언트 -> 서버 요청 등)
받을 때 까지 기다리는 것이 아닌 다음 코드를 실행하는 자바스크립트의 특성
비동기 처리 로직을 선언하는 메서드, 비동기 로직을 담당하는 mutations
데이터 요청, Promise, ES6 async과 같은 비동기 처리는 모두 actions에 선언
dispatch로 호출 == 뮤테이션의 commit
비동기 처리를 actions에 선언하는 이유:
actions 역시 뮤테이션을 안쓰고 state를 변경하면 어느 시점에 어떤 컴포넌트가 변경하였는지
추적하기 어려운 것처럼 뮤테이션이 언제 호출될 지, 어느 시점, 어느 컴포넌트에서 state를 호출, 변경
했는지 확인하기가 어렵기 때문에 actions를 거쳐 추적이 용이하게함
- 여러 개의 컴포넌트에서 뮤테이션으로 시간 차를 두고 state를 변경하면 추적이 어렵다.
mutations에는 동기 처리 로직만 넣고 actions에서는 비동기 처리 로직만 넣는다.
-- store.js
state: {
    num: 10
},
mutations: {
    doubleNumber(state) {
        state.num * 2;
    }
},
actions: {
    delayDoubelNumber(context) { // actions는 context로 store의 메서드와 속성 접근
    context.commit('doubleNumber');
    }
}
-- App.vue
this.$store.dispatch('delayDoubelNumber);

-- store.js
mutations: {
    addCounter(state) {
        state.counter++
    },
},
actions: {
    delayAddCounter(context) {
        setTimeout(() => context.commit('addCounter'), 2000);
    }
}

-- App.vue
methods: {
    incrementCounter(){
        this.$store.dispatch('delayAddCounter')
    }
}

-- store.js
mutations: {
    setData(state, fetchedData) {
        state.product = fetchedData;
    }
},
actions: {
    fetchedData(context) {
        return axios.get('https://domain.com/products/1)
                    .then(response => context.commit('setData', response));
    }
}

-- App.vue
methods: {
    getProduct() {
        this.$store.dispatch('fetchedData');
    }
}