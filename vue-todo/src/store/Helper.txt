헬퍼(Helper): Store에 있는 속성들을 간편하게 코딩하는 방법
store를 사용하는 컴포넌트가 많아졌을 때 복잡한 관리를 간편하게 하기 위함
state -> mapState
getters -> mapGetters
mutations-> mapMutaitions
actions -> mapActions

ES6 Spread(...): 뿌리는 연산자 / 배열, 문자열과 같이 반복 가능한 것을
다른 객체, 배열로 복제하거나 옮길 때 사용
let josh = {
    field: 'web',
    language: 'js
}

let developer = {
    nation = 'korea',
    // 조쉬의 필드를 가져오고 싶을 때
    ...json // == josh.field
}

-- Helper
*****mapState*****
Vuex에 선언한 state 속성을 뷰 컴포넌트에 더 쉽게 연결해주는 헬퍼
// App.Vue
import { mapState } from 'vuex';

computed() {
    ...mapState(['num'])
    // = num() { return this.$store.state.num ;}
}

// store.js
state: {
    num: 10
}
<p>{{ this.num }}</p>
// = <p>{{ this.$store.state.num }}</p>
*****mapState*****
Vuex에 선언한 getters 속성을 뷰 컴포넌트에 더 쉽게 연결해주는 헬퍼
// App.vue
import { mapGetters } from 'vuex'

coumputed() { ...mapGetters{['reverseMessage']} }

//store.js
getters: {
    reverseMessage(state) {
        retirn state.msg.split('').reverse().join('');
    }
}

<p>{{ this.reverseMessage }}/p>
// = <p>{{ this.$store.getters.reverseMessage }}/p>

*****mapMutaitions*****
Vuex에서 선언한 mutations 속성을 뷰 컴포넌트에 더 쉽게 연결해주는 헬퍼
// App.vue
import { mapMutaitions } from 'vuex'

methods: {
    ...mapMutaitions(['clickBtn'],
    authLogin() {},
    displayTable () {}
}

// store.js
mutations: {
    clickBtn(state) {
        alert('state.msg');
    }
}

<button @click="clickBtn">popup message</button>

*****mapActions*****
Vuex에 선언한 actions 속성을 뷰 컴포넌트에 더 쉽게연결해주는 헬퍼
// App.vue
import { mapActions } from 'vuex'

methods: {
    ...mapActions(['delayClickBtn'])
}

// store.js
actions: {
    delayClickBtn(context) {
        setTimeout(() => context.commit('clickBtn'), 2000);
    }
}

<button @click='delayClickBtn'>delay popup message</button>

*****헬퍼의 유연한 문법*****
Vuex에 선언한 속성을 그대로 컴포넌트에 연결하는 문법
// 배열 리터럴
...mapMutaitions([
    'clickBtn', //'clickBtn': clickBtn
    'addNumber' // addNumber(인자)
])

Vuex에 선언한 속성을 컴포넌트의 특정 메서드에다가 연결하는 문법
// 객체 리터럴
...mapMutaitions({
    popupMsg: 'clickBtn' // 컴포넌트 메서드 명: store의 뮤테이션 명
})